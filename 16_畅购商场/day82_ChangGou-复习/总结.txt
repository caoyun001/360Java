畅购项目总结:
第一天:
	1. 架构的发展历程:
		集中式架构, 垂直架构, 分布式架构, 微服务架构
	2. 畅购的整体架构: 使用微服务架构, springboot + springCloud + ssm

第二天:
	1. 跨域访问问题解决:
		什么是跨域访问:
			由于浏览器开发厂商, 在开发浏览器的时候内置了同源策略, 要求页面在发送ajax的时候, 发送的地址和浏览器访问页面的地址, 协议, 域名(ip地址), 端口号必须一致,
			这三样如果有一个地方不一致,则认为发生跨域访问, 发生跨域访问之后, 浏览器不接受服务器返回回来的数据, 认为不安全.
		解决办法:
			springMvc4.2以上版本, 在controller类上加入@CrossOrigin注解
	2. fastDFS分布式文件系统:
		上传文件保存文件解决方案:
			a. 使用云存储: 适合小量数据, 中小规模公司使用, 有阿里云, 七牛云可以用
			b. 自己搭建FastDFS分布式文件系统集群使用. 适合每天数据量增长比较大的公司使用.
	
		原理:
			fastDFS分为管理端: tracker端
				   存储端: storage端
			1. 先启动管理端, 在启动存储端, 存储端会自动到管理端中注册, 告诉管理端自己的ip和端口
			2. 我们访问的时候, 需要在项目中配置管理端服务器ip和端口, 先访问管理端, 管理端会给我们自动分配一个存储端的ip和端口
			3. 我们拿着这个ip和端口就可以到具体的存储端服务器进行存储. 存储后, 存储端会给我们返回存储后的地址和文件名.
			优点:
				1. 管理端和存储端, 都可以一台主机多台备机, 主机备机间有心跳检测功能, 高可用.
				2. 管理端可以均匀的给存储端分配存储任务, 具有负载均衡的特性, 所以可以承载高并发存储
				3. 存储端一台主机一台备机, 我们向主机中存储, 主机会将内容自动同步到备机, 备机中也有一份文件, 这样冗余存储, 容灾性强
				4. 存储端两台一组, 可以水平无限扩展, 扩展性强.
			缺点:
				使用机器数量很庞大, 所以这种使用fastDFS存储方案适合大公司使用.
		
第三天:
	1. 加密算法分类:
		可逆:
			加密后, 密文可以还原成明文.
			对称加密:
				加密和解密可以使用同一把钥匙
				优点: 加解密速度快, 适合大量内容加解密
				缺点: 安全级别不是特别高
			非对称加密:
				加密和解密使用不同的钥匙, 公钥加密, 私钥解密, 私钥加密, 公钥解密
				优点: 安全级别高
				缺点: 速度慢, 适合小量的内容, 特别重要的内容加解密.
		不可逆:
			加密后就还原不了, 但是可以校验密文和明文是不是一致
			例如: md5, bcrypt等

	 base64算法: 这个算法不算加密算法, 因为它就是为了防止传输过程中, 文字乱码, 将文字按照一定的编码, 进行编码解码.
	2. Jwt(JSON Web Token): 其实就是一段固定格式内容的json.
		分为三部分组成: head头, payload载荷, signature签名组成
		head头记录了使用的加密方式
		payload载荷可以进行自定义, 放里面一些我们需要的东西
		签名 = (头通过base64编码 + 载荷通过base64编码) 通过头中指定的加密算法进行加密
		
第四天:
	1. 唯一主键ID生成方案:
		UUID生成: 生成出来的内容基本不会重复, 但是是一堆字符串
			优点: 基本不会重复
			缺点: 可读性差, 不能够按照生成的先后顺序进行排序.
		Redis生成: 生成出来的是纯数字
			优点: 可以按照生成的先后顺序排序, 可以保证不重复
			缺点: 如果在我们的项目的技术栈当中没有用到redis, 那么这里使用redis会增加技术复杂度.
		snowflake算法: Twiter公司推出的雪花算法
			优点: 生成纯数字, 并且可以按照生成的时间顺序排序, 可读性好, 不依赖其他技术.
			缺点: 前41位时间戳是根据当前服务器系统时间生成, 如果当前服务器系统时间不准确, 则会造成生成出来的id, 没有办法按照时间排序.
第五天:
	1. lua语言:
		lua是一种小巧的脚本语言, 也叫做胶水语言, lua不适合用来开发单独的应用程序或者项目, 但是可以和任何语言结合, 完成一些批处理任务.
		lua还有原子性操作的特性.
		lua语言我们这里使用场景:
			使用openrestry来调用执行lua语言的脚本, 我们使用lua来读取大广告数据, 使用lua来调用redis和mysql等存储大广告数据.
	2. nginx三大作用:
		a. 负载均衡功能: 在高并发的时候, 我们的项目可以部署集群, 也就是同一个项目可以部署很多台, 部署到不同的服务器中, nginx可以根据并发请求
				将请求均匀的分发给各个tomcat服务器进行处理.
		b. 反向代理功能: 由于各个tomcat中的项目访问路径不同, nginx会根据消费者在浏览器上输入的路径不同, 找到不同的服务器进行业务处理.
		c. http服务器功能: nginx可以运行, html, js, css, jpg, png等静态资源, 性能比tomcat高很多, 所以静态的资源建议放到nginx中运行.
	3. openResty:
		openResty是包装后的nginx, 以nginx为基础, 加入了lua语言的支持, 并且加入了lua语言访问mysql, 访问redis等一些第三方包.
		使用openResty可以非常方便的使用lua语言, 使用nginx.
	
		








































